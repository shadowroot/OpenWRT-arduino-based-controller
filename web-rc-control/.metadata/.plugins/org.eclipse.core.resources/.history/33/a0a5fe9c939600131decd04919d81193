/*
 * webcontrol.c
 *
 *
 *Web Controller

- RC Car controller and others
-

 *  Created on: 4. 2. 2014
 *      Author: jonny
 */

#include "webcontrol.h"

// TODO login parse

/**
 *	Login function
 * @param value
 * @return Error code or 0
 */
int login(STRING username,STRING password){



	return 0;
}
/**
 *
 * @param cookie
 * @param SESSIONID
 * @return
 */
int isLogged(char * cookie,int * SESSIONID){
	char * param, * value;
	while(!parseCOOKIE(&cookie,&param,&value)){
		if(strcmp(param,"SESSION")){
			*SESSIONID = atoi(value);
		}
	}
	if(*SESSIONID < 0){
		if(login()){
			return 1;
		}
	}
	return 0;
}

int parseCOOKIE(char ** buffer_in,char ** param,char ** value){
	char * token = NULL;
		token = strtok(*buffer_in,";");
		if(!token){
			return -1;
		}
		*value = token;
		*param = strtok(*value,"=");
	return 0;
}




int parseREQUEST(char ** buffer_in,char ** param,char ** value){
	char * token = NULL;
		token = strtok(*buffer_in,"&");
		if(!token){
			return -1;
		}
		*value = token;
		*param = strtok(*value,"=");

	return 0;
}


//
//int parseGET(char * buffer_in){
//	char * value, * param;
//	while(!parseREQUEST(&buffer_in,&param,&value)){
//
//	}
//	return 0;
//}

int parsePOST(char * buffer_in){
	char * value, * param;
	while(!parseREQUEST(&buffer_in,&param,&value)){

	}
	return 0;
}
/**
 *
 * @return
 */

void sendHeader(char * cookie){
	fputs("HTTP/1.0 200 OK\r\n",stdout);
	fputs("Content-type: text/plain\r\n",stdout);
	fputs("Set-Cookie:",stdout);
	fputs(cookie,stdout);
	fputs("\r\n\r\n",stdout);
}


int writeStream(char * buffer_out){
	fputs(buffer_out,stdin);
	return 0;
}


/**
 * Logging
 * @param level
 * @param msg
 */
void log(int level,const char * msg){
	struct time_t now = time(NULL);
	char * out = " [ ";
	strcat(out,ctime(&now));
	strcat(out," ] \t");
	strcat(out,msg);
	strcat(out,"\r\n");
	fputs(out,LOG_FILE);
}

/**
 * Entry point to application
 *
 * @return
 */

int main(int argc,char * argv[]){


	/*
	 * initializing variables
	 */
	char * action = NULL;
	char * data_in = NULL;
	char * cookie = NULL;
	int data_lenght_in = 0;
	char * w_content_data_length = NULL;
	char * buffer_in = NULL;
	char * buffer_out = NULL;
	char * token = NULL;
	int SESSIONID = -1;

	struct TRequest * GETrequests = NULL;
	struct TRequest * POSTrequests = NULL;



//parse /etc/passwd data for accounts and shadow for passwords
	buffer_out = (char*) malloc(PACKET_SIZE);


	//	get method string
	action = getenv("QUERY_STRING");
/*
 * There come sonly context of commands inside requests
 * Example:
 * ?login
 * ?command
 * ?action
 *
 */

	cookie = getenv("HTTP_COOKIE");
	w_content_data_length = getenv("CONTENT_LENGTH");
	data_lenght_in = atoi(w_content_data_length);
	/*
	 * Getting data via POST data from stdin to buffer_in
	 */
	buffer_in = (char*) malloc(data_lenght_in);
	fread(buffer_in,data_lenght_in,stdin);
	/*
	 * process data
	 */

	sendHeader(cookie);


	free(buffer_in);
	free(buffer_out);
	return 0;
}


